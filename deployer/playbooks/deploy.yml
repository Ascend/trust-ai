- import_playbook: distribution.yml

- name: deploy for all hosts
  hosts: '{{ hosts_name }}'
  gather_facts: false
  tasks:
    - name: gather facts
      setup:
        fact_path: /notexist
    
    - name: set resources_dir local
      set_fact:
        resources_dir: "{{ inventory_dir }}/resources"
        cacheable: yes
      when: ansible_connection == "local"

    - name: set resources_dir remote
      set_fact:
        resources_dir: "{{ ansible_user_dir }}/resources"
        cacheable: yes
      when: ansible_connection != "local"
    
    - import_tasks: install.yml
    
    - name: check model
      stat:
        path: /run/board_cfg.ini
      register: a500
      when: server is undefined
    
    - name: set kmsagent path
      set_fact:
        kmsagent_path: "{{ '/usr/local/Ascend/driver/tools/kmsagent' if not a500.stat.exists else '/home/data/miniD/driver/tools/kmsagent' }}"
        cacheable: yes
      when: server is undefined
    
    - name: create tmp dir
      shell: |
        mkdir -p /home/HwHiAiUser/.ansible/tmp
        chown -R HwHiAiUser:HwHiAiUser /home/HwHiAiUser/.ansible
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: check kmsagent
      shell: "{{ kmsagent_path }} -V"
      register: kmsagent_status
      failed_when: false
      environment:
        LD_LIBRARY_PATH: "/usr/local/Ascend/driver/lib64/inner/:/usr/local/Ascend/develop/lib64/"
      become: yes
      become_user: HwHiAiUser
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: message
      fail:
        msg: "kmsagent not found"
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
        - '"version" not in kmsagent_status.stdout'
    
    - name: Check whether the cert directory exists
      stat:
        path: /opt/cert
      register: dir_result
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")

    - name: clean resources
      file:
        state: absent
        path: /opt/cert
      when:
        - server is undefined and dir_result.stat|d("") != "" and dir_result.stat.exists
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: copy ca files
      shell: cp -r {{ resources_dir }}/cert /opt
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: set cert dir permission
      file:
        path: /opt/cert
        owner: HwHiAiUser
        group: HwHiAiUser
        mode: 0700
        recurse: no
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: set cafile permission first
      file:
        path: /opt/cert/ca.key
        owner: HwHiAiUser
        group: HwHiAiUser
        mode: 0600
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: set cafile permission second
      file:
        path: /opt/cert/ca.pem
        owner: HwHiAiUser
        group: HwHiAiUser
        mode: 0600
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: create TlsCertPath and TlsBackupCertPath
      shell: mkdir -p /opt/cfs_tlscert /opt/cfs_tlscertbak /opt/aivault_tlscert /opt/aivault_tlscertbak
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: set TlsCertPath and TlsBackupCertPath directory owner
      shell: chown -R HwHiAiUser:HwHiAiUser /opt/cfs_tlscert /opt/cfs_tlscertbak /opt/aivault_tlscert /opt/aivault_tlscertbak
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")

    - name: Check whether the docker network aiguard exists
      shell: docker network ls | grep aiguard | wc -l
      register: aiguard_result
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: docker create network aiguard
      shell: docker network create aiguard
      when:
        - server is undefined and aiguard_result.stdout|d("") != "" and aiguard_result.stdout == "0"
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: get CfsIP
      shell: docker network inspect aiguard | grep Gateway|cut -d'"' -f4
      register: cfsip
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Configuring the cfs service
      shell: |
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s SERVER_FOR_CFS -n IP -v {{ cfsip.stdout }}
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s SERVER_FOR_CFS -n Port -v {{ cfs_port }}
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s SERVER_FOR_CFS -n TlsCertPath -v /opt/cfs_tlscert
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s SERVER_FOR_CFS -n TlsBackupCertPath -v /opt/cfs_tlscertbak
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s SERVER_FOR_CFS -n CaPath -v /opt/cert/ca.pem
      environment:
        LD_LIBRARY_PATH: "/usr/local/Ascend/driver/lib64/inner/:/usr/local/Ascend/develop/lib64/"
      become: yes
      become_user: HwHiAiUser
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Configuring the aivault service
      shell: |
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s CLIENT_FOR_AIVAULT -n ConnectIP -v {{ aivault_ip }}
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s CLIENT_FOR_AIVAULT -n ConnectPort -v {{ svc_port }}
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s CLIENT_FOR_AIVAULT -n TlsCertPath -v /opt/aivault_tlscert
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s CLIENT_FOR_AIVAULT -n TlsBackupCertPath -v /opt/aivault_tlscertbak
        {{ kmsagent_path }} -c /var/kmsagentd/kmsagent.conf -k /var/kmsagentd/kmsconf.ksf -s CLIENT_FOR_AIVAULT -n CaPath -v /opt/cert/ca.pem
      environment:
        LD_LIBRARY_PATH: "/usr/local/Ascend/driver/lib64/inner/:/usr/local/Ascend/develop/lib64/"
      become: yes
      become_user: HwHiAiUser
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Start kmsagent service
      shell: npu-smi set -t key-manage -s start
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Generate csr certificate request for cfs
      shell: |
        {{ kmsagent_path }} tls-cfs get-csr "rsa:4096:sha256" "CN|sichuan|chengdu|Ascend|CFS" /var/kmsagentd/kmsagent.conf /var/kmsagentd/kmsconf.ksf
      environment:
        LD_LIBRARY_PATH: "/usr/local/Ascend/driver/lib64/inner/:/usr/local/Ascend/develop/lib64/"
      become: yes
      become_user: HwHiAiUser
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Copy cfs certificate request from remote host to local
      fetch:
        src: /opt/cfs_tlscert/tmp/kmsagent.csr
        dest: "{{ hostvars.localhost.resources_dir }}"
      when: server is undefined and ansible_connection != "local"
    
    - name: Generate cfs certificate
      shell: python3 {{ resources_dir }}/../config/certs.py {{ all }} {{ passin }} cfs
      when: ansible_connection == "local"
    
    - name: copy cfs certificate to remote hosts
      copy:
        src: "{{ hostvars.localhost.resources_dir }}/{{ hostvars[inventory_hostname]['inventory_hostname'] }}/opt/cfs_tlscert/tmp/kmsagent.pem"
        dest: /opt/cfs_tlscert/tmp
      when: server is undefined and ansible_connection != "local"
    
    - name: set TlsCertPath and TlsBackupCertPath directory owner
      shell: chown -R HwHiAiUser:HwHiAiUser /opt/cfs_tlscert /opt/cfs_tlscertbak /opt/aivault_tlscert /opt/aivault_tlscertbak
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Import cfs certificate
      shell: |
        {{ kmsagent_path }} tls-cfs set-cert "/opt/cfs_tlscert/tmp/kmsagent.pem /opt/cert/ca.pem" /var/kmsagentd/kmsagent.conf /var/kmsagentd/kmsconf.ksf
      environment:
        LD_LIBRARY_PATH: "/usr/local/Ascend/driver/lib64/inner/:/usr/local/Ascend/develop/lib64/"
      become: yes
      become_user: HwHiAiUser
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: restart the kmsagent service
      shell: |
        npu-smi set -t key-manage -s stop
        npu-smi set -t key-manage -s start
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Generate kmsagent.csr
      shell: |
        {{ kmsagent_path }} tls-client get-csr "rsa:4096:sha256" "CN|sichuan|chengdu|Ascend|KMSAgent" /var/kmsagentd/kmsagent.conf /var/kmsagentd/kmsconf.ksf
      environment:
        LD_LIBRARY_PATH: "/usr/local/Ascend/driver/lib64/inner/:/usr/local/Ascend/develop/lib64/"
      become: yes
      become_user: HwHiAiUser
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Copy kmsagent.csr from remote host to local
      fetch:
        src: /opt/aivault_tlscert/tmp/kmsagent.csr
        dest: "{{ hostvars.localhost.resources_dir }}"
      when: server is undefined and ansible_connection != "local"
    
    - name: Generate kmsagent.pem
      shell: python3 {{ resources_dir }}/../config/certs.py {{ all }} {{ passin }} kmsagent
      when: ansible_connection == "local"
    
    - name: copy kmsagent.pem to remote hosts
      copy:
        src: "{{ hostvars.localhost.resources_dir }}/{{ hostvars[inventory_hostname]['inventory_hostname'] }}/opt/aivault_tlscert/tmp/kmsagent.pem"
        dest: /opt/aivault_tlscert/tmp
      when: server is undefined and ansible_connection != "local"
    
    - name: set TlsCertPath and TlsBackupCertPath directory owner
      shell: chown -R HwHiAiUser:HwHiAiUser /opt/cfs_tlscert /opt/cfs_tlscertbak /opt/aivault_tlscert /opt/aivault_tlscertbak
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")

    - name: Import kmsagent certificate
      shell: |
        {{ kmsagent_path }} tls-client set-cert "/opt/aivault_tlscert/tmp/kmsagent.pem /opt/cert/ca.pem" /var/kmsagentd/kmsagent.conf /var/kmsagentd/kmsconf.ksf
      environment:
        LD_LIBRARY_PATH: "/usr/local/Ascend/driver/lib64/inner/:/usr/local/Ascend/develop/lib64/"
      become: yes
      become_user: HwHiAiUser
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: restart the kmsagent service
      shell: |
        npu-smi set -t key-manage -s stop
        npu-smi set -t key-manage -s start
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: Check the running state of kmsagent
      shell: npu-smi info -t key-manage
      register: kmsagent_stat
      when:
        - server is undefined
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")
    
    - name: message
      debug:
        msg:
          - "{{ kmsagent_stat | default('NOT DEFINED') }}"
      when:
        - server is undefined and kmsagent_stat.changed
        - ansible_connection != "local" or (ansible_connection == "local" and all == "y")